@using Sandbox;
@using Sandbox.UI;
@using Saandy;
@inherits PanelComponent

<root>
	<Image class="map" Texture=@Texture/>

	@for(int i = 0; i < Icons.Length; i++) 
	{
		<div class="icon" @ref="Icons[i]" style="background-image: url( 'textures/icons/warning.vtex' )"></div>
		@*<img class="icon" @ref=Icons[i] src="textures/icons/liftoff.vtex" ><	/img>*@
		@*<div class="icon" @ref=Icons[i]></div>*@
	}

	<div class="text">Spectating: @(MiniMapComponent.SelectedPlayerName)</div>

</root>

@code
{
	// ???
	public static Panel[] Icons = new[] {
		new Panel(),
		new Panel(),
		new Panel(),
		new Panel(),
		new Panel(),
		new Panel(),
		new Panel(),
		new Panel(),
		new Panel(),
		new Panel(),
		new Panel(),
		new Panel(),
		new Panel(),
		new Panel(),
		new Panel(),
		new Panel(),
		new Panel(),
		new Panel(),
		new Panel(),
		new Panel(),
	};

	public Texture Texture => MiniMapComponent.Texture;

	public static void UpdateIcons( List<IHasMapIcon> iconsIn )
	{
		//Icons.Clear();

		for (int i = 0; i < Icons.Length; i++)
		{
			if(iconsIn.Count - 1 < i) { Icons[i].RemoveClass("Visible"); continue; }

			Vector2 pos = MiniMapComponent.GetIconPositionOnScreen(iconsIn[i]);

			Icons[i].Style.Left = Length.Fraction(pos.x);
			Icons[i].Style.Top = Length.Fraction(pos.y);
			Icons[i].Style.BackgroundColor = iconsIn[i].IconColor;
			//Icons[i].Style.SetBackgroundImage("textures/icons/warning.png" );
			Icons[i].AddClass("Visible");

			//-MiniMapComponent.Yaw
			var pt = new PanelTransform();
			pt.AddRotation(0, 0, -iconsIn[i].IconRotation + MiniMapComponent.Yaw);
			Icons[i].Style.Transform = pt;
		}

	}

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine(Time.Now);// (Texture == null ? 0 : Texture.GetHashCode());

}
